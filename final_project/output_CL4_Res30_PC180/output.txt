---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res30_PC180
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res30_PC180
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res30_PC180
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res30_PC180
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res30_PC180
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res30_PC180
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res30_PC180
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res30_PC180
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 181)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 181)
   |---> PCA image test set shape: (240, 181)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(2)  539(2)   61(2)  892(2)  942(2)  789(2)  657(2)    
       2     |    1(1)  249(0)  449(2)  607(0)  406(0)  457(2)  590(3)    
       3     |    2(3)  925(3)   86(3)  419(3)  799(3)  420(3)  770(3)    
       4     |    3(1)  635(1)  257(1)  162(1)  708(1)  823(2)  735(0)    
       5     |    4(3)  375(3)  246(3)  483(3)  793(3)  432(3)  199(3)    
       6     |    5(2)  657(2)  526(2)  157(2)  554(2)  292(2)  729(2)    
       7     |    6(2)  506(2)  823(2)  942(2)  457(2)  249(0)  735(0)    
       8     |    7(0)  575(0)  861(0)  714(0)  359(0)  460(0)  130(0)    
       9     |    8(3)  487(3)  239(3)  770(3)  925(3)  166(3)  387(3)    
      10     |    9(1)  164(1)  626(1)  549(1)  560(1)  534(1)  659(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    1   |    1 
       3     |    3   |    3 
       4     |    1   |    1 
       5     |    3   |    3 
       6     |    2   |    2 
       7     |    2   |    2 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(2)  539(2)   61(2)  892(2)  942(2)  789(2)  657(2)    
       2     |    1(1)  249(0)  449(2)  607(0)  406(0)  457(2)  590(3)    
       3     |    2(3)  925(3)   86(3)  419(3)  799(3)  420(3)  770(3)    
       4     |    3(1)  635(1)  257(1)  162(1)  708(1)  823(2)  735(0)    
       5     |    4(3)  375(3)  246(3)  483(3)  793(3)  432(3)  199(3)    
       6     |    5(2)  657(2)  526(2)  157(2)  554(2)  292(2)  729(2)    
       7     |    6(2)  506(2)  823(2)  942(2)  457(2)  249(0)  735(0)    
       8     |    7(0)  575(0)  861(0)  714(0)  359(0)  460(0)  130(0)    
       9     |    8(3)  487(3)  239(3)  770(3)  925(3)  166(3)  387(3)    
      10     |    9(1)  164(1)  626(1)  549(1)  560(1)  534(1)  659(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    1   |    0 
       3     |    3   |    3 
       4     |    1   |    1 
       5     |    3   |    3 
       6     |    2   |    2 
       7     |    2   |    2 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 95.625%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  541(3)  467(3)  128(3)  212(3)  950(3)    2(3)  925(3)    
       2     |  208(1)  205(1)  959(1)  469(1)  343(1)  350(1)  765(1)    
       3     |  406(0)  788(0)  281(0)  355(3)  249(0)  823(2)  590(3)    
       4     |  722(1)  129(1)  626(1)  560(1)  164(1)   67(1)  859(1)    
       5     |  823(2)  457(2)  942(2)  590(3)  424(2)  249(0)  373(3)    
       6     |  793(3)  939(3)   57(3)  804(3)  858(3)  684(3)  455(3)    
       7     |  381(1)  738(1)  600(1)   15(1)   39(1)  862(1)  473(1)    
       8     |  248(3)  735(0)  249(0)  607(0)  823(2)  526(2)  748(2)    
       9     |  554(2)  729(2)  657(2)  922(2)  457(2)  135(2)  942(2)    
      10     |  609(2)  701(2)  875(2)   63(2)  820(2)  150(2)  757(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    1   |    1 
       3     |    0   |    0 
       4     |    1   |    1 
       5     |    2   |    2 
       6     |    3   |    3 
       7     |    1   |    1 
       8     |    3   |    0 
       9     |    2   |    2 
      10     |    2   |    2 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 93.750%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  541(3)  467(3)  128(3)  212(3)  950(3)    2(3)  925(3)    
       2     |  208(1)  205(1)  959(1)  469(1)  343(1)  350(1)  765(1)    
       3     |  406(0)  788(0)  281(0)  355(3)  249(0)  823(2)  590(3)    
       4     |  722(1)  129(1)  626(1)  560(1)  164(1)   67(1)  859(1)    
       5     |  823(2)  457(2)  942(2)  590(3)  424(2)  249(0)  373(3)    
       6     |  793(3)  939(3)   57(3)  804(3)  858(3)  684(3)  455(3)    
       7     |  381(1)  738(1)  600(1)   15(1)   39(1)  862(1)  473(1)    
       8     |  248(3)  735(0)  249(0)  607(0)  823(2)  526(2)  748(2)    
       9     |  554(2)  729(2)  657(2)  922(2)  457(2)  135(2)  942(2)    
      10     |  609(2)  701(2)  875(2)   63(2)  820(2)  150(2)  757(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    1   |    1 
       3     |    0   |    0 
       4     |    1   |    1 
       5     |    2   |    2 
       6     |    3   |    3 
       7     |    1   |    1 
       8     |    3   |    0 
       9     |    2   |    2 
      10     |    2   |    2 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 93.333%  <<-|



---> End of process.
