---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res48_PC180
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res48_PC180
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res48_PC180
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res48_PC180
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res48_PC180
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res48_PC180
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC180
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res48_PC180
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC180
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res48_PC180
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 181)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 181)
   |---> PCA image test set shape: (240, 181)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  488(1)  784(1)  408(1)  455(1)  490(1)  713(1)    
       2     |    1(1)  340(3)  189(0)   85(2)  407(2)  318(2)  856(2)    
       3     |    2(3)  376(3)   85(2)  318(2)  161(0)  688(2)  528(3)    
       4     |    3(3)  407(2)  867(3)   85(2)   84(1)  558(0)  366(3)    
       5     |    4(0)  572(0)  245(0)  720(0)  161(0)  227(0)  189(0)    
       6     |    5(1)  528(3)  204(3)   85(2)  191(3)  318(2)  833(0)    
       7     |    6(1)   67(1)  236(1)  356(1)  629(1)  407(2)  529(1)    
       8     |    7(0)  324(0)  888(0)   31(0)  603(0)  672(0)  591(0)    
       9     |    8(3)  302(3)  882(3)  351(3)  872(3)  348(3)  847(3)    
      10     |    9(3)  947(3)  318(2)  119(3)  508(3)  130(2)   85(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    1   |    1 
       3     |    3   |    3 
       4     |    3   |    3 
       5     |    0   |    0 
       6     |    1   |    1 
       7     |    1   |    1 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  488(1)  784(1)  408(1)  455(1)  490(1)  713(1)    
       2     |    1(1)  340(3)  189(0)   85(2)  407(2)  318(2)  856(2)    
       3     |    2(3)  376(3)   85(2)  318(2)  161(0)  688(2)  528(3)    
       4     |    3(3)  407(2)  867(3)   85(2)   84(1)  558(0)  366(3)    
       5     |    4(0)  572(0)  245(0)  720(0)  161(0)  227(0)  189(0)    
       6     |    5(1)  528(3)  204(3)   85(2)  191(3)  318(2)  833(0)    
       7     |    6(1)   67(1)  236(1)  356(1)  629(1)  407(2)  529(1)    
       8     |    7(0)  324(0)  888(0)   31(0)  603(0)  672(0)  591(0)    
       9     |    8(3)  302(3)  882(3)  351(3)  872(3)  348(3)  847(3)    
      10     |    9(3)  947(3)  318(2)  119(3)  508(3)  130(2)   85(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    1   |    2 
       3     |    3   |    2 
       4     |    3   |    3 
       5     |    0   |    0 
       6     |    1   |    3 
       7     |    1   |    1 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 89.583%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  510(0)  257(0)  550(0)  705(0)   73(0)  430(0)  826(0)    
       2     |  862(2)  895(3)  807(2)  118(3)  867(3)  191(3)  403(2)    
       3     |  773(2)  633(2)   85(2)  528(3)  161(0)  407(2)  626(2)    
       4     |  357(0)  957(0)  617(0)  150(0)  925(0)   13(0)  257(0)    
       5     |  879(3)  533(3)   10(3)   21(3)  711(3)  340(3)  849(3)    
       6     |  763(1)  534(1)  297(1)  739(1)  185(1)  713(1)  620(1)    
       7     |   85(2)  318(2)  407(2)  161(0)   42(2)  372(3)  773(2)    
       8     |  141(0)   27(0)  228(0)  509(0)  430(0)  340(3)  252(0)    
       9     |  351(3)  804(3)  953(3)  767(3)  882(3)  680(3)  847(3)    
      10     |  688(2)  519(2)  525(2)  318(2)  407(2)  130(2)   85(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    2   |    3 
       3     |    2   |    2 
       4     |    0   |    0 
       5     |    3   |    3 
       6     |    1   |    1 
       7     |    2   |    2 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    2   |    2 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 85.417%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  510(0)  257(0)  550(0)  705(0)   73(0)  430(0)  826(0)    
       2     |  862(2)  895(3)  807(2)  118(3)  867(3)  191(3)  403(2)    
       3     |  773(2)  633(2)   85(2)  528(3)  161(0)  407(2)  626(2)    
       4     |  357(0)  957(0)  617(0)  150(0)  925(0)   13(0)  257(0)    
       5     |  879(3)  533(3)   10(3)   21(3)  711(3)  340(3)  849(3)    
       6     |  763(1)  534(1)  297(1)  739(1)  185(1)  713(1)  620(1)    
       7     |   85(2)  318(2)  407(2)  161(0)   42(2)  372(3)  773(2)    
       8     |  141(0)   27(0)  228(0)  509(0)  430(0)  340(3)  252(0)    
       9     |  351(3)  804(3)  953(3)  767(3)  882(3)  680(3)  847(3)    
      10     |  688(2)  519(2)  525(2)  318(2)  407(2)  130(2)   85(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    2   |    3 
       3     |    2   |    2 
       4     |    0   |    0 
       5     |    3   |    3 
       6     |    1   |    1 
       7     |    2   |    2 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    2   |    2 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 84.167%  <<-|



---> End of process.
