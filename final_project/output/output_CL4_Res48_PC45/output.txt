---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res48_PC45
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res48_PC45
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res48_PC45
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res48_PC45
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res48_PC45
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res48_PC45
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res48_PC45
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res48_PC45
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 46)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 46)
   |---> PCA image test set shape: (240, 46)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(3)    2(3)  366(2)  439(0)  520(3)  347(2)  897(3)    
       2     |    1(0)  206(0)  801(0)  153(0)    3(0)  459(0)  374(0)    
       3     |    2(3)  347(2)  744(2)  543(2)  376(0)  332(2)  936(0)    
       4     |    3(0)  581(0)  459(0)  374(0)  206(0)  376(0)  579(1)    
       5     |    4(3)  907(3)   33(3)  474(3)  146(3)  241(3)  897(3)    
       6     |    5(0)  211(0)  307(0)  178(0)  220(0)  339(0)  534(0)    
       7     |    6(1)  411(1)  557(1)  112(1)  738(1)  341(1)  679(1)    
       8     |    7(3)  766(3)   31(3)   17(3)  796(3)  795(3)  185(3)    
       9     |    8(2)  280(2)  274(1)  906(2)  526(3)  557(1)  131(1)    
      10     |    9(1)  635(1)  619(1)  477(1)  132(1)  161(1)  292(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    0   |    0 
       3     |    3   |    3 
       4     |    0   |    0 
       5     |    3   |    3 
       6     |    0   |    0 
       7     |    1   |    1 
       8     |    3   |    3 
       9     |    2   |    2 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(3)    2(3)  366(2)  439(0)  520(3)  347(2)  897(3)    
       2     |    1(0)  206(0)  801(0)  153(0)    3(0)  459(0)  374(0)    
       3     |    2(3)  347(2)  744(2)  543(2)  376(0)  332(2)  936(0)    
       4     |    3(0)  581(0)  459(0)  374(0)  206(0)  376(0)  579(1)    
       5     |    4(3)  907(3)   33(3)  474(3)  146(3)  241(3)  897(3)    
       6     |    5(0)  211(0)  307(0)  178(0)  220(0)  339(0)  534(0)    
       7     |    6(1)  411(1)  557(1)  112(1)  738(1)  341(1)  679(1)    
       8     |    7(3)  766(3)   31(3)   17(3)  796(3)  795(3)  185(3)    
       9     |    8(2)  280(2)  274(1)  906(2)  526(3)  557(1)  131(1)    
      10     |    9(1)  635(1)  619(1)  477(1)  132(1)  161(1)  292(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    0   |    0 
       3     |    3   |    2 
       4     |    0   |    0 
       5     |    3   |    3 
       6     |    0   |    0 
       7     |    1   |    1 
       8     |    3   |    3 
       9     |    2   |    1 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 93.438%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  679(1)  565(1)  454(1)  904(2)  290(1)  148(1)  752(1)    
       2     |  700(0)  406(3)  744(2)  936(0)  704(2)    2(3)  332(2)    
       3     |    7(3)  796(3)  710(3)  766(3)  296(3)  146(3)  185(3)    
       4     |  936(0)  739(3)  328(3)    2(3)  314(2)  256(2)  704(2)    
       5     |  332(2)  280(2)  314(2)  504(2)  704(2)  936(0)  906(2)    
       6     |   45(0)  532(0)  584(0)  459(0)  398(0)  718(0)  206(0)    
       7     |  700(0)  723(0)  376(0)  510(2)  714(1)   46(1)  874(3)    
       8     |  728(0)  810(0)  482(0)  333(0)  133(0)  681(0)  625(0)    
       9     |  258(2)  407(2)  941(2)  441(2)  331(2)  396(2)  280(2)    
      10     |  912(3)  800(3)  600(0)  898(3)  121(3)  363(3)  943(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    2 
       3     |    3   |    3 
       4     |    3   |    3 
       5     |    2   |    2 
       6     |    0   |    0 
       7     |    0   |    0 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 93.333%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  679(1)  565(1)  454(1)  904(2)  290(1)  148(1)  752(1)    
       2     |  700(0)  406(3)  744(2)  936(0)  704(2)    2(3)  332(2)    
       3     |    7(3)  796(3)  710(3)  766(3)  296(3)  146(3)  185(3)    
       4     |  936(0)  739(3)  328(3)    2(3)  314(2)  256(2)  704(2)    
       5     |  332(2)  280(2)  314(2)  504(2)  704(2)  936(0)  906(2)    
       6     |   45(0)  532(0)  584(0)  459(0)  398(0)  718(0)  206(0)    
       7     |  700(0)  723(0)  376(0)  510(2)  714(1)   46(1)  874(3)    
       8     |  728(0)  810(0)  482(0)  333(0)  133(0)  681(0)  625(0)    
       9     |  258(2)  407(2)  941(2)  441(2)  331(2)  396(2)  280(2)    
      10     |  912(3)  800(3)  600(0)  898(3)  121(3)  363(3)  943(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    2 
       3     |    3   |    3 
       4     |    3   |    2 
       5     |    2   |    2 
       6     |    0   |    0 
       7     |    0   |    0 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 92.500%  <<-|



---> End of process.
