---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res30_PC15
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res30_PC15
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res30_PC15
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res30_PC15
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res30_PC15
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res30_PC15
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res30_PC15
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res30_PC15
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 16)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 16)
   |---> PCA image test set shape: (240, 16)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)   25(1)  562(1)  799(1)  422(1)  867(1)  576(1)    
       2     |    1(0)  653(0)  613(0)  688(0)  160(0)  858(0)  362(0)    
       3     |    2(3)  685(1)   63(0)  821(0)  710(3)  539(3)  525(3)    
       4     |    3(2)  269(3)  825(2)  481(3)  265(2)  804(3)  722(2)    
       5     |    4(2)  741(0)  824(2)  152(3)  581(1)  123(0)  345(2)    
       6     |    5(2)  256(2)  766(1)   66(2)  802(2)  930(1)  910(2)    
       7     |    6(1)  225(1)  552(1)  795(1)  701(1)   67(1)  854(1)    
       8     |    7(3)  826(2)  327(3)  251(3)  583(3)  655(3)  929(0)    
       9     |    8(0)  956(0)  743(0)  749(0)  601(0)  837(0)   92(0)    
      10     |    9(3)   42(3)  606(3)   51(3)  892(3)  630(3)  629(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    0 
       3     |    3   |    3 
       4     |    2   |    2 
       5     |    2   |    2 
       6     |    2   |    2 
       7     |    1   |    1 
       8     |    3   |    3 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)   25(1)  562(1)  799(1)  422(1)  867(1)  576(1)    
       2     |    1(0)  653(0)  613(0)  688(0)  160(0)  858(0)  362(0)    
       3     |    2(3)  685(1)   63(0)  821(0)  710(3)  539(3)  525(3)    
       4     |    3(2)  269(3)  825(2)  481(3)  265(2)  804(3)  722(2)    
       5     |    4(2)  741(0)  824(2)  152(3)  581(1)  123(0)  345(2)    
       6     |    5(2)  256(2)  766(1)   66(2)  802(2)  930(1)  910(2)    
       7     |    6(1)  225(1)  552(1)  795(1)  701(1)   67(1)  854(1)    
       8     |    7(3)  826(2)  327(3)  251(3)  583(3)  655(3)  929(0)    
       9     |    8(0)  956(0)  743(0)  749(0)  601(0)  837(0)   92(0)    
      10     |    9(3)   42(3)  606(3)   51(3)  892(3)  630(3)  629(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    0 
       3     |    3   |    3 
       4     |    2   |    2 
       5     |    2   |    2 
       6     |    2   |    2 
       7     |    1   |    1 
       8     |    3   |    3 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 89.896%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |   78(0)  579(0)  950(0)  578(2)  628(0)  958(0)  297(0)    
       2     |  262(3)  622(3)  209(3)  856(3)  918(3)  417(3)  746(3)    
       3     |  264(3)  241(3)  233(1)  532(3)  295(3)  619(3)  469(1)    
       4     |  677(1)   67(1)  132(0)  340(1)  563(0)   83(1)  104(2)    
       5     |  865(0)  841(0)  526(0)   40(0)    8(0)  743(0)  413(0)    
       6     |  865(0)  857(0)  526(0)  508(0)  139(0)  275(0)  601(0)    
       7     |  113(1)   53(0)  109(2)  323(3)   72(1)   33(2)  775(1)    
       8     |  351(0)  523(0)    2(3)  604(0)  886(3)  522(3)  733(0)    
       9     |  176(2)   48(3)  438(2)  754(2)  572(2)  550(2)  898(3)    
      10     |  752(3)  922(3)  514(3)  192(0)  842(0)  397(0)  333(0)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    3   |    3 
       3     |    1   |    3 
       4     |    0   |    1 
       5     |    0   |    0 
       6     |    0   |    0 
       7     |    1   |    1 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    3   |    0 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 82.083%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |   78(0)  579(0)  950(0)  578(2)  628(0)  958(0)  297(0)    
       2     |  262(3)  622(3)  209(3)  856(3)  918(3)  417(3)  746(3)    
       3     |  264(3)  241(3)  233(1)  532(3)  295(3)  619(3)  469(1)    
       4     |  677(1)   67(1)  132(0)  340(1)  563(0)   83(1)  104(2)    
       5     |  865(0)  841(0)  526(0)   40(0)    8(0)  743(0)  413(0)    
       6     |  865(0)  857(0)  526(0)  508(0)  139(0)  275(0)  601(0)    
       7     |  113(1)   53(0)  109(2)  323(3)   72(1)   33(2)  775(1)    
       8     |  351(0)  523(0)    2(3)  604(0)  886(3)  522(3)  733(0)    
       9     |  176(2)   48(3)  438(2)  754(2)  572(2)  550(2)  898(3)    
      10     |  752(3)  922(3)  514(3)  192(0)  842(0)  397(0)  333(0)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    3   |    3 
       3     |    1   |    3 
       4     |    0   |    1 
       5     |    0   |    0 
       6     |    0   |    0 
       7     |    1   |    1 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    3   |    0 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 81.667%  <<-|



---> End of process.
