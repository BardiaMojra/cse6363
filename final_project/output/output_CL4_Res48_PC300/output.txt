---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res48_PC300
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res48_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res48_PC300
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res48_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res48_PC300
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res48_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res48_PC300
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res48_PC300
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 301)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 301)
   |---> PCA image test set shape: (240, 301)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  582(1)  457(1)  436(1)  738(1)  615(1)  553(1)    
       2     |    1(0)  598(0)  438(0)  807(0)  281(0)  365(3)  425(0)    
       3     |    2(2)  941(3)  316(2)  574(2)  414(3)  948(0)  365(3)    
       4     |    3(3)  769(3)  392(2)  414(3)  486(3)   67(3)  217(3)    
       5     |    4(2)  392(2)  414(3)  800(2)  425(0)  941(3)  365(3)    
       6     |    5(2)  941(3)  316(2)  298(3)  414(3)  365(3)  800(2)    
       7     |    6(0)  841(0)  771(0)  568(0)  736(0)  658(0)  520(0)    
       8     |    7(2)  946(2)  325(3)  504(3)   13(2)  835(2)  497(0)    
       9     |    8(0)   65(0)  605(0)  674(0)  957(0)  438(0)  281(0)    
      10     |    9(3)  252(1)  217(3)  414(3)  231(2)  624(3)  288(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    0 
       3     |    2   |    2 
       4     |    3   |    3 
       5     |    2   |    2 
       6     |    2   |    2 
       7     |    0   |    0 
       8     |    2   |    2 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  582(1)  457(1)  436(1)  738(1)  615(1)  553(1)    
       2     |    1(0)  598(0)  438(0)  807(0)  281(0)  365(3)  425(0)    
       3     |    2(2)  941(3)  316(2)  574(2)  414(3)  948(0)  365(3)    
       4     |    3(3)  769(3)  392(2)  414(3)  486(3)   67(3)  217(3)    
       5     |    4(2)  392(2)  414(3)  800(2)  425(0)  941(3)  365(3)    
       6     |    5(2)  941(3)  316(2)  298(3)  414(3)  365(3)  800(2)    
       7     |    6(0)  841(0)  771(0)  568(0)  736(0)  658(0)  520(0)    
       8     |    7(2)  946(2)  325(3)  504(3)   13(2)  835(2)  497(0)    
       9     |    8(0)   65(0)  605(0)  674(0)  957(0)  438(0)  281(0)    
      10     |    9(3)  252(1)  217(3)  414(3)  231(2)  624(3)  288(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    0 
       3     |    2   |    2 
       4     |    3   |    3 
       5     |    2   |    2 
       6     |    2   |    3 
       7     |    0   |    0 
       8     |    2   |    2 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 91.875%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  941(3)  365(3)  316(2)  392(2)  414(3)  598(0)  768(1)    
       2     |  655(3)  737(3)  365(3)  177(3)  547(3)  549(0)  575(3)    
       3     |  800(2)  365(3)  347(3)  941(3)  392(2)  425(0)  316(2)    
       4     |  715(3)  523(3)  729(3)  645(3)  357(3)  791(3)  917(3)    
       5     |   28(2)  392(2)   82(3)  800(2)  213(3)  283(2)  414(3)    
       6     |  213(3)  474(3)  681(3)  800(2)  414(3)  155(1)  828(3)    
       7     |   21(0)  772(0)  239(0)  868(0)  235(0)  605(0)  882(0)    
       8     |  673(0)  513(0)  531(2)  218(1)  497(0)  414(3)  800(2)    
       9     |  392(2)  522(0)  745(2)  952(2)  876(2)  181(2)  609(2)    
      10     |  392(2)  298(3)  807(0)  598(0)  425(0)  800(2)  941(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    3   |    3 
       3     |    3   |    3 
       4     |    3   |    3 
       5     |    3   |    2 
       6     |    3   |    3 
       7     |    0   |    0 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    1   |    0 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 85.833%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  941(3)  365(3)  316(2)  392(2)  414(3)  598(0)  768(1)    
       2     |  655(3)  737(3)  365(3)  177(3)  547(3)  549(0)  575(3)    
       3     |  800(2)  365(3)  347(3)  941(3)  392(2)  425(0)  316(2)    
       4     |  715(3)  523(3)  729(3)  645(3)  357(3)  791(3)  917(3)    
       5     |   28(2)  392(2)   82(3)  800(2)  213(3)  283(2)  414(3)    
       6     |  213(3)  474(3)  681(3)  800(2)  414(3)  155(1)  828(3)    
       7     |   21(0)  772(0)  239(0)  868(0)  235(0)  605(0)  882(0)    
       8     |  673(0)  513(0)  531(2)  218(1)  497(0)  414(3)  800(2)    
       9     |  392(2)  522(0)  745(2)  952(2)  876(2)  181(2)  609(2)    
      10     |  392(2)  298(3)  807(0)  598(0)  425(0)  800(2)  941(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    3   |    3 
       3     |    3   |    2 
       4     |    3   |    3 
       5     |    3   |    2 
       6     |    3   |    3 
       7     |    0   |    0 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    1   |    0 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 87.083%  <<-|



---> End of process.
