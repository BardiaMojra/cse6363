---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res48_PC15
   --->>> Test ID/config tag: CL4_C0_dog_Res48_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res48_PC15
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res48_PC15
   --->>> Test ID/config tag: CL4_C1_horse_Res48_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res48_PC15
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res48_PC15
   --->>> Test ID/config tag: CL4_C4_chicken_Res48_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res48_PC15
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC15
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res48_PC15
   --->>> Test ID/config tag: CL4_C7_sheep_Res48_PC15
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res48_PC15
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 16)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 16)
   |---> PCA image test set shape: (240, 16)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  847(1)  638(1)  211(1)  687(1)  644(1)  832(1)    
       2     |    1(1)  786(1)  135(1)  664(1)  534(1)  735(1)  878(1)    
       3     |    2(3)   13(3)  617(3)  872(2)  183(3)  280(2)  270(3)    
       4     |    3(0)  821(3)  111(3)  205(2)   78(3)  500(0)   96(2)    
       5     |    4(1)  660(1)   41(1)  157(1)  475(1)  938(1)   18(1)    
       6     |    5(2)  562(2)  752(2)  852(2)  759(2)  928(0)  408(0)    
       7     |    6(2)  325(0)  456(3)  116(1)  515(1)  956(1)  887(0)    
       8     |    7(2)  208(2)  665(2)  809(2)  740(3)  370(2)   89(2)    
       9     |    8(1)  128(1)  179(1)  382(3)  368(1)  631(3)  681(1)    
      10     |    9(1)  625(1)  765(3)  257(1)   70(1)  241(1)   95(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    1   |    1 
       3     |    3   |    3 
       4     |    0   |    0 
       5     |    1   |    1 
       6     |    2   |    2 
       7     |    2   |    2 
       8     |    2   |    2 
       9     |    1   |    1 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  847(1)  638(1)  211(1)  687(1)  644(1)  832(1)    
       2     |    1(1)  786(1)  135(1)  664(1)  534(1)  735(1)  878(1)    
       3     |    2(3)   13(3)  617(3)  872(2)  183(3)  280(2)  270(3)    
       4     |    3(0)  821(3)  111(3)  205(2)   78(3)  500(0)   96(2)    
       5     |    4(1)  660(1)   41(1)  157(1)  475(1)  938(1)   18(1)    
       6     |    5(2)  562(2)  752(2)  852(2)  759(2)  928(0)  408(0)    
       7     |    6(2)  325(0)  456(3)  116(1)  515(1)  956(1)  887(0)    
       8     |    7(2)  208(2)  665(2)  809(2)  740(3)  370(2)   89(2)    
       9     |    8(1)  128(1)  179(1)  382(3)  368(1)  631(3)  681(1)    
      10     |    9(1)  625(1)  765(3)  257(1)   70(1)  241(1)   95(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    1   |    1 
       3     |    3   |    3 
       4     |    0   |    3 
       5     |    1   |    1 
       6     |    2   |    2 
       7     |    2   |    1 
       8     |    2   |    2 
       9     |    1   |    1 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 87.812%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  953(0)  538(0)  754(0)  312(0)  408(0)  324(0)  770(0)    
       2     |  875(2)  623(2)  714(2)  693(2)  314(2)  403(2)  682(2)    
       3     |  587(3)  813(3)  615(3)  402(3)  313(3)  913(3)   67(3)    
       4     |  378(2)  843(2)  863(2)  415(2)  609(2)  819(2)   27(2)    
       5     |  180(2)  232(0)  288(2)  188(2)  954(3)  744(2)  394(1)    
       6     |  144(2)  658(1)   22(3)  213(3)  202(0)  313(3)  592(2)    
       7     |   89(2)  208(2)   83(2)  284(2)  809(2)  370(2)  105(2)    
       8     |   72(3)  388(3)  615(3)  522(3)  258(3)  725(3)  616(3)    
       9     |  641(1)   62(1)  917(1)  278(1)  774(1)  769(3)  448(1)    
      10     |  931(1)  591(1)  397(1)   18(1)  264(1)  340(0)  553(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    2   |    2 
       3     |    3   |    3 
       4     |    2   |    2 
       5     |    0   |    2 
       6     |    2   |    2 
       7     |    2   |    2 
       8     |    3   |    3 
       9     |    1   |    1 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 85.417%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  953(0)  538(0)  754(0)  312(0)  408(0)  324(0)  770(0)    
       2     |  875(2)  623(2)  714(2)  693(2)  314(2)  403(2)  682(2)    
       3     |  587(3)  813(3)  615(3)  402(3)  313(3)  913(3)   67(3)    
       4     |  378(2)  843(2)  863(2)  415(2)  609(2)  819(2)   27(2)    
       5     |  180(2)  232(0)  288(2)  188(2)  954(3)  744(2)  394(1)    
       6     |  144(2)  658(1)   22(3)  213(3)  202(0)  313(3)  592(2)    
       7     |   89(2)  208(2)   83(2)  284(2)  809(2)  370(2)  105(2)    
       8     |   72(3)  388(3)  615(3)  522(3)  258(3)  725(3)  616(3)    
       9     |  641(1)   62(1)  917(1)  278(1)  774(1)  769(3)  448(1)    
      10     |  931(1)  591(1)  397(1)   18(1)  264(1)  340(0)  553(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    2   |    2 
       3     |    3   |    3 
       4     |    2   |    2 
       5     |    0   |    2 
       6     |    2   |    3 
       7     |    2   |    2 
       8     |    3   |    3 
       9     |    1   |    1 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 82.500%  <<-|



---> End of process.
