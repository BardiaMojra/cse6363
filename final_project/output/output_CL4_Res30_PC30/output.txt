---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC30
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res30_PC30
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC30
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res30_PC30
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC30
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res30_PC30
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC30
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res30_PC30
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC30
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res30_PC30
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC30
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res30_PC30
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC30
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res30_PC30
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC30
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res30_PC30
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 31)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 31)
   |---> PCA image test set shape: (240, 31)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(0)  355(0)  518(0)  680(0)  521(0)  236(0)  178(0)    
       2     |    1(2)  718(2)  565(2)  293(2)  252(2)  774(2)  119(2)    
       3     |    2(3)   31(3)  305(3)  467(3)  454(3)  151(3)  596(3)    
       4     |    3(3)  413(3)  637(3)  181(3)  503(3)   89(3)  535(3)    
       5     |    4(1)  647(1)  485(1)  560(1)  152(1)  381(1)  473(1)    
       6     |    5(3)  889(3)  682(3)  145(3)  332(3)  928(3)  538(3)    
       7     |    6(2)   35(2)  924(2)  205(2)  192(2)   11(2)  110(2)    
       8     |    7(3)  905(3)   94(3)  242(3)   23(3)   86(3)   27(3)    
       9     |    8(2)  836(2)  488(2)  489(0)  296(2)  700(2)  764(1)    
      10     |    9(1)  821(3)  533(1)  701(1)   67(2)  803(3)   49(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    2   |    2 
       3     |    3   |    3 
       4     |    3   |    3 
       5     |    1   |    1 
       6     |    3   |    3 
       7     |    2   |    2 
       8     |    3   |    3 
       9     |    2   |    2 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(0)  355(0)  518(0)  680(0)  521(0)  236(0)  178(0)    
       2     |    1(2)  718(2)  565(2)  293(2)  252(2)  774(2)  119(2)    
       3     |    2(3)   31(3)  305(3)  467(3)  454(3)  151(3)  596(3)    
       4     |    3(3)  413(3)  637(3)  181(3)  503(3)   89(3)  535(3)    
       5     |    4(1)  647(1)  485(1)  560(1)  152(1)  381(1)  473(1)    
       6     |    5(3)  889(3)  682(3)  145(3)  332(3)  928(3)  538(3)    
       7     |    6(2)   35(2)  924(2)  205(2)  192(2)   11(2)  110(2)    
       8     |    7(3)  905(3)   94(3)  242(3)   23(3)   86(3)   27(3)    
       9     |    8(2)  836(2)  488(2)  489(0)  296(2)  700(2)  764(1)    
      10     |    9(1)  821(3)  533(1)  701(1)   67(2)  803(3)   49(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    2   |    2 
       3     |    3   |    3 
       4     |    3   |    3 
       5     |    1   |    1 
       6     |    3   |    3 
       7     |    2   |    2 
       8     |    3   |    3 
       9     |    2   |    2 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 93.646%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  952(2)  776(2)  668(2)  622(2)  864(2)  744(2)  747(0)    
       2     |  758(3)  346(0)  474(2)  296(2)  736(3)  717(3)  920(2)    
       3     |  933(3)  172(3)  320(3)  305(3)  169(3)  810(3)  266(3)    
       4     |  513(0)  217(0)  672(0)  725(0)  586(0)  954(0)  609(0)    
       5     |  933(3)  227(0)  147(3)  875(0)  632(0)  195(1)  532(0)    
       6     |  203(2)  873(2)  360(2)  591(2)  420(2)  462(2)  693(2)    
       7     |  312(1)  923(1)  880(1)  736(3)  533(1)  433(1)  686(1)    
       8     |  381(1)  650(1)  674(1)  485(1)  840(1)  753(1)   40(1)    
       9     |  373(3)  587(3)  125(2)  131(3)  101(3)  423(3)  464(0)    
      10     |  597(3)  820(3)  437(3)  593(3)  510(3)  151(3)  234(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    3   |    3 
       3     |    3   |    3 
       4     |    0   |    0 
       5     |    0   |    0 
       6     |    2   |    2 
       7     |    1   |    1 
       8     |    1   |    1 
       9     |    3   |    3 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 91.667%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  952(2)  776(2)  668(2)  622(2)  864(2)  744(2)  747(0)    
       2     |  758(3)  346(0)  474(2)  296(2)  736(3)  717(3)  920(2)    
       3     |  933(3)  172(3)  320(3)  305(3)  169(3)  810(3)  266(3)    
       4     |  513(0)  217(0)  672(0)  725(0)  586(0)  954(0)  609(0)    
       5     |  933(3)  227(0)  147(3)  875(0)  632(0)  195(1)  532(0)    
       6     |  203(2)  873(2)  360(2)  591(2)  420(2)  462(2)  693(2)    
       7     |  312(1)  923(1)  880(1)  736(3)  533(1)  433(1)  686(1)    
       8     |  381(1)  650(1)  674(1)  485(1)  840(1)  753(1)   40(1)    
       9     |  373(3)  587(3)  125(2)  131(3)  101(3)  423(3)  464(0)    
      10     |  597(3)  820(3)  437(3)  593(3)  510(3)  151(3)  234(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    3   |    2 
       3     |    3   |    3 
       4     |    0   |    0 
       5     |    0   |    0 
       6     |    2   |    2 
       7     |    1   |    1 
       8     |    1   |    1 
       9     |    3   |    3 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 90.833%  <<-|



---> End of process.
