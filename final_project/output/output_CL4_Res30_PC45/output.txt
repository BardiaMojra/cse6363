---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res30_PC45
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res30_PC45
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res30_PC45
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res30_PC45
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res30_PC45
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res30_PC45
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC45
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res30_PC45
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC45
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res30_PC45
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 46)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 46)
   |---> PCA image test set shape: (240, 46)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(2)  480(2)  290(2)  434(2)  569(2)   73(2)  508(2)    
       2     |    1(1)  125(1)  181(1)  468(1)  713(1)  355(1)  297(1)    
       3     |    2(0)  421(0)  430(0)  573(0)  877(0)  885(3)  761(0)    
       4     |    3(1)  405(1)  677(1)  367(1)  609(1)  766(1)  198(1)    
       5     |    4(1)  622(1)  624(1)  786(1)  285(1)  838(1)   55(2)    
       6     |    5(0)  687(0)  885(3)  251(0)  245(0)  598(0)  837(0)    
       7     |    6(0)  668(0)  420(2)  121(2)  293(2)  444(3)  709(3)    
       8     |    7(2)  914(2)  548(2)  322(2)  660(2)  487(2)  374(2)    
       9     |    8(0)   15(0)  932(0)  650(0)  664(0)  583(0)  156(3)    
      10     |    9(3)   56(3)  311(3)  537(0)  429(3)  475(3)  323(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    1   |    1 
       3     |    0   |    0 
       4     |    1   |    1 
       5     |    1   |    1 
       6     |    0   |    0 
       7     |    0   |    0 
       8     |    2   |    2 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(2)  480(2)  290(2)  434(2)  569(2)   73(2)  508(2)    
       2     |    1(1)  125(1)  181(1)  468(1)  713(1)  355(1)  297(1)    
       3     |    2(0)  421(0)  430(0)  573(0)  877(0)  885(3)  761(0)    
       4     |    3(1)  405(1)  677(1)  367(1)  609(1)  766(1)  198(1)    
       5     |    4(1)  622(1)  624(1)  786(1)  285(1)  838(1)   55(2)    
       6     |    5(0)  687(0)  885(3)  251(0)  245(0)  598(0)  837(0)    
       7     |    6(0)  668(0)  420(2)  121(2)  293(2)  444(3)  709(3)    
       8     |    7(2)  914(2)  548(2)  322(2)  660(2)  487(2)  374(2)    
       9     |    8(0)   15(0)  932(0)  650(0)  664(0)  583(0)  156(3)    
      10     |    9(3)   56(3)  311(3)  537(0)  429(3)  475(3)  323(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    1   |    1 
       3     |    0   |    0 
       4     |    1   |    1 
       5     |    1   |    1 
       6     |    0   |    0 
       7     |    0   |    2 
       8     |    2   |    2 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 94.896%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  229(1)  258(1)  917(1)  116(1)  431(1)  904(1)  447(1)    
       2     |  763(0)  119(0)  594(0)   86(0)  671(0)  467(0)  712(0)    
       3     |  744(0)  429(3)  175(3)  579(0)  783(3)  830(1)  537(0)    
       4     |   15(0)  350(0)  650(0)  623(0)  932(0)  257(0)  208(0)    
       5     |  370(1)  448(3)  272(1)  205(1)  449(1)  447(1)  105(1)    
       6     |  293(2)  208(0)  895(2)  823(2)  240(3)  314(3)  398(0)    
       7     |  606(0)  845(0)    5(0)  687(0)  870(0)  688(0)  638(0)    
       8     |   46(0)  119(0)  712(0)  625(0)  177(0)  775(0)  653(0)    
       9     |  323(3)  520(3)  746(3)  873(3)  429(3)  142(0)  674(3)    
      10     |   40(2)  550(2)  368(2)  837(0)  568(0)  402(3)  915(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    0 
       3     |    0   |    3 
       4     |    0   |    0 
       5     |    1   |    1 
       6     |    0   |    2 
       7     |    0   |    0 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    0   |    2 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 93.333%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  229(1)  258(1)  917(1)  116(1)  431(1)  904(1)  447(1)    
       2     |  763(0)  119(0)  594(0)   86(0)  671(0)  467(0)  712(0)    
       3     |  744(0)  429(3)  175(3)  579(0)  783(3)  830(1)  537(0)    
       4     |   15(0)  350(0)  650(0)  623(0)  932(0)  257(0)  208(0)    
       5     |  370(1)  448(3)  272(1)  205(1)  449(1)  447(1)  105(1)    
       6     |  293(2)  208(0)  895(2)  823(2)  240(3)  314(3)  398(0)    
       7     |  606(0)  845(0)    5(0)  687(0)  870(0)  688(0)  638(0)    
       8     |   46(0)  119(0)  712(0)  625(0)  177(0)  775(0)  653(0)    
       9     |  323(3)  520(3)  746(3)  873(3)  429(3)  142(0)  674(3)    
      10     |   40(2)  550(2)  368(2)  837(0)  568(0)  402(3)  915(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    0   |    0 
       3     |    0   |    0 
       4     |    0   |    0 
       5     |    1   |    1 
       6     |    0   |    2 
       7     |    0   |    0 
       8     |    0   |    0 
       9     |    3   |    3 
      10     |    0   |    2 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 92.500%  <<-|



---> End of process.
