---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC90
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res30_PC90
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC90
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res30_PC90
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC90
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res30_PC90
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC90
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res30_PC90
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC90
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res30_PC90
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC90
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res30_PC90
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC90
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res30_PC90
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC90
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res30_PC90
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 91)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 91)
   |---> PCA image test set shape: (240, 91)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(0)   90(0)  775(0)  325(0)  443(0)  125(0)  523(0)    
       2     |    1(1)  875(1)  177(1)  281(1)  149(1)   37(1)  930(1)    
       3     |    2(3)  366(3)  200(3)    3(3)  832(3)  673(3)  228(2)    
       4     |    3(3)  832(3)  183(3)   30(2)  441(2)  366(3)  673(3)    
       5     |    4(1)  374(1)  551(1)  767(1)  169(1)  798(1)  387(1)    
       6     |    5(2)  305(2)  506(2)  241(2)  228(2)  144(2)  129(2)    
       7     |    6(0)  187(2)  272(0)  463(0)  368(0)  207(0)  871(0)    
       8     |    7(3)  617(3)  183(3)  673(3)  470(3)  245(3)   12(3)    
       9     |    8(2)  921(2)  663(0)  121(2)  748(2)  643(2)  472(2)    
      10     |    9(3)  392(3)  853(3)  442(3)  427(3)  574(3)  115(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    1   |    1 
       3     |    3   |    3 
       4     |    3   |    3 
       5     |    1   |    1 
       6     |    2   |    2 
       7     |    0   |    0 
       8     |    3   |    3 
       9     |    2   |    2 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(0)   90(0)  775(0)  325(0)  443(0)  125(0)  523(0)    
       2     |    1(1)  875(1)  177(1)  281(1)  149(1)   37(1)  930(1)    
       3     |    2(3)  366(3)  200(3)    3(3)  832(3)  673(3)  228(2)    
       4     |    3(3)  832(3)  183(3)   30(2)  441(2)  366(3)  673(3)    
       5     |    4(1)  374(1)  551(1)  767(1)  169(1)  798(1)  387(1)    
       6     |    5(2)  305(2)  506(2)  241(2)  228(2)  144(2)  129(2)    
       7     |    6(0)  187(2)  272(0)  463(0)  368(0)  207(0)  871(0)    
       8     |    7(3)  617(3)  183(3)  673(3)  470(3)  245(3)   12(3)    
       9     |    8(2)  921(2)  663(0)  121(2)  748(2)  643(2)  472(2)    
      10     |    9(3)  392(3)  853(3)  442(3)  427(3)  574(3)  115(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    1   |    1 
       3     |    3   |    3 
       4     |    3   |    3 
       5     |    1   |    1 
       6     |    2   |    2 
       7     |    0   |    0 
       8     |    3   |    3 
       9     |    2   |    2 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 94.792%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  129(2)  272(0)  547(2)  825(2)   14(2)  636(2)  305(2)    
       2     |  228(2)  129(2)  368(0)  272(0)  812(2)  570(0)  388(0)    
       3     |  455(0)  590(1)  771(3)  933(0)   83(1)  786(3)  347(3)    
       4     |  673(3)  645(3)  205(3)  786(3)   12(3)  156(3)  368(0)    
       5     |  795(1)  949(1)  952(1)  813(1)  536(1)  368(0)  121(2)    
       6     |  406(0)  289(0)  426(0)  896(0)  880(0)  841(0)  231(0)    
       7     |  113(0)  388(0)  570(0)  933(0)  463(0)  360(0)   83(1)    
       8     |  531(0)  454(2)   25(3)  221(2)  743(2)  656(0)  771(3)    
       9     |  125(0)  219(0)  454(2)  523(0)  275(0)  786(3)  121(2)    
      10     |  178(3)  820(3)  912(3)  334(3)  124(3)  228(2)  630(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    2   |    0 
       3     |    0   |    3 
       4     |    3   |    3 
       5     |    1   |    1 
       6     |    0   |    0 
       7     |    0   |    0 
       8     |    0   |    2 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 91.667%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  129(2)  272(0)  547(2)  825(2)   14(2)  636(2)  305(2)    
       2     |  228(2)  129(2)  368(0)  272(0)  812(2)  570(0)  388(0)    
       3     |  455(0)  590(1)  771(3)  933(0)   83(1)  786(3)  347(3)    
       4     |  673(3)  645(3)  205(3)  786(3)   12(3)  156(3)  368(0)    
       5     |  795(1)  949(1)  952(1)  813(1)  536(1)  368(0)  121(2)    
       6     |  406(0)  289(0)  426(0)  896(0)  880(0)  841(0)  231(0)    
       7     |  113(0)  388(0)  570(0)  933(0)  463(0)  360(0)   83(1)    
       8     |  531(0)  454(2)   25(3)  221(2)  743(2)  656(0)  771(3)    
       9     |  125(0)  219(0)  454(2)  523(0)  275(0)  786(3)  121(2)    
      10     |  178(3)  820(3)  912(3)  334(3)  124(3)  228(2)  630(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    2   |    2 
       2     |    2   |    0 
       3     |    0   |    3 
       4     |    3   |    3 
       5     |    1   |    1 
       6     |    0   |    0 
       7     |    0   |    0 
       8     |    0   |    2 
       9     |    0   |    0 
      10     |    3   |    3 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 89.167%  <<-|



---> End of process.
