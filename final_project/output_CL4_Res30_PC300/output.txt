---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res30_PC300
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res30_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res30_PC300
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res30_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res30_PC300
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res30_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res30_PC300
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res30_PC300
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 301)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 301)
   |---> PCA image test set shape: (240, 301)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(3)  664(3)  479(3)  247(3)  595(3)  896(2)  109(3)    
       2     |    1(3)  443(3)  542(3)  654(3)  498(3)  133(3)  380(3)    
       3     |    2(3)  291(3)  929(3)  230(3)  524(3)  876(3)  363(3)    
       4     |    3(0)  631(0)  801(0)  811(0)  264(0)  819(0)  120(0)    
       5     |    4(2)  779(2)  198(2)  360(2)  499(2)   92(2)  435(2)    
       6     |    5(1)  689(1)  255(1)  347(1)   41(1)   35(1)  157(1)    
       7     |    6(2)  246(2)  501(2)  196(2)  791(2)  896(2)  282(2)    
       8     |    7(1)  657(1)  758(1)  759(1)  392(1)  177(1)   11(1)    
       9     |    8(0)  573(0)  794(0)  488(0)  139(0)  136(0)   17(0)    
      10     |    9(1)  580(1)  708(1)  617(1)  742(1)  615(1)  177(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    3   |    3 
       3     |    3   |    3 
       4     |    0   |    0 
       5     |    2   |    2 
       6     |    1   |    1 
       7     |    2   |    2 
       8     |    1   |    1 
       9     |    0   |    0 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(3)  664(3)  479(3)  247(3)  595(3)  896(2)  109(3)    
       2     |    1(3)  443(3)  542(3)  654(3)  498(3)  133(3)  380(3)    
       3     |    2(3)  291(3)  929(3)  230(3)  524(3)  876(3)  363(3)    
       4     |    3(0)  631(0)  801(0)  811(0)  264(0)  819(0)  120(0)    
       5     |    4(2)  779(2)  198(2)  360(2)  499(2)   92(2)  435(2)    
       6     |    5(1)  689(1)  255(1)  347(1)   41(1)   35(1)  157(1)    
       7     |    6(2)  246(2)  501(2)  196(2)  791(2)  896(2)  282(2)    
       8     |    7(1)  657(1)  758(1)  759(1)  392(1)  177(1)   11(1)    
       9     |    8(0)  573(0)  794(0)  488(0)  139(0)  136(0)   17(0)    
      10     |    9(1)  580(1)  708(1)  617(1)  742(1)  615(1)  177(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    3   |    3 
       3     |    3   |    3 
       4     |    0   |    0 
       5     |    2   |    2 
       6     |    1   |    1 
       7     |    2   |    2 
       8     |    1   |    1 
       9     |    0   |    0 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 95.625%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  871(3)  812(3)  465(3)  643(3)  789(3)  491(3)   87(3)    
       2     |  363(3)  719(3)  688(3)  841(3)  417(3)   29(3)  116(3)    
       3     |  134(0)  679(3)  286(0)  791(2)  896(2)  464(0)  201(0)    
       4     |  813(0)  175(0)  712(0)  603(0)  607(0)  552(0)  664(3)    
       5     |  591(2)  606(2)  618(2)  896(2)   25(2)  798(2)  438(2)    
       6     |  264(0)  819(0)  120(0)  455(0)  801(0)  631(0)   27(0)    
       7     |  245(1)  662(1)   64(1)  410(1)  694(1)  343(1)  624(1)    
       8     |  819(0)  120(0)  455(0)  264(0)   27(0)  801(0)    3(0)    
       9     |  716(1)  662(1)  558(1)  245(1)  343(1)  410(1)   30(1)    
      10     |  410(1)  849(1)  118(1)   64(1)  572(1)   73(1)  890(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    3   |    3 
       3     |    0   |    0 
       4     |    0   |    0 
       5     |    2   |    2 
       6     |    0   |    0 
       7     |    1   |    1 
       8     |    0   |    0 
       9     |    1   |    1 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 92.500%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |  871(3)  812(3)  465(3)  643(3)  789(3)  491(3)   87(3)    
       2     |  363(3)  719(3)  688(3)  841(3)  417(3)   29(3)  116(3)    
       3     |  134(0)  679(3)  286(0)  791(2)  896(2)  464(0)  201(0)    
       4     |  813(0)  175(0)  712(0)  603(0)  607(0)  552(0)  664(3)    
       5     |  591(2)  606(2)  618(2)  896(2)   25(2)  798(2)  438(2)    
       6     |  264(0)  819(0)  120(0)  455(0)  801(0)  631(0)   27(0)    
       7     |  245(1)  662(1)   64(1)  410(1)  694(1)  343(1)  624(1)    
       8     |  819(0)  120(0)  455(0)  264(0)   27(0)  801(0)    3(0)    
       9     |  716(1)  662(1)  558(1)  245(1)  343(1)  410(1)   30(1)    
      10     |  410(1)  849(1)  118(1)   64(1)  572(1)   73(1)  890(1)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    3   |    3 
       2     |    3   |    3 
       3     |    0   |    0 
       4     |    0   |    0 
       5     |    2   |    2 
       6     |    0   |    0 
       7     |    1   |    1 
       8     |    0   |    0 
       9     |    1   |    1 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 92.500%  <<-|



---> End of process.
