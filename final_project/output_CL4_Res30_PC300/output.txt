---> Creating data object...

---> at ./data/raw-img/cane/, dog is a class
---> at ./data/raw-img/cavallo/, horse is a class
---> at ./data/raw-img/gallina/, chicken is a class
---> at ./data/raw-img/pecora/, sheep is a class

---> Computing principal components...
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C0_dog_Res30_PC300
   --->>> Test ID/config tag: CL4_C0_dog_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C0_dog_Res30_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C1_horse_Res30_PC300
   --->>> Test ID/config tag: CL4_C1_horse_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C1_horse_Res30_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C4_chicken_Res30_PC300
   --->>> Test ID/config tag: CL4_C4_chicken_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C4_chicken_Res30_PC300
---> Computing principal components...
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC300
---> Saving class PC projections figure: ./output/figure_CL4_C7_sheep_Res30_PC300
   --->>> Test ID/config tag: CL4_C7_sheep_Res30_PC300
---> Saving class PC variance figure: ./output/figure_PCvar_CL4_C7_sheep_Res30_PC300
---> Saving dataXY object to binary file...
---> Saving eigenXY object to binary file...
---> Saving labels object to binary file...

---> Labels and class indices:
   | -  0 : dog
   | -  1 : horse
   | -  2 : chicken
   | -  3 : sheep

---> Shuffling PCA image dataset...
   |---> PCA image set shape: (1200, 301)
---> Create test set: sampling PCA image dataset w/o replacement...
   |---> PCA image training set shape: (960, 301)
   |---> PCA image test set shape: (240, 301)
---> Initializing KNN classifier... 

\------> Test model with: training data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  318(1)  217(1)  157(1)  955(1)  663(3)  497(3)    
       2     |    1(2)  958(2)  472(2)   55(2)  708(2)  110(2)  626(2)    
       3     |    2(3)  959(3)  663(3)  905(3)  398(3)  626(2)  951(3)    
       4     |    3(1)  476(1)  156(1)  744(1)  403(1)  771(1)  581(1)    
       5     |    4(3)  175(3)   75(3)  905(3)  641(3)  242(3)  230(3)    
       6     |    5(3)  419(3)  540(3)  770(3)  661(3)   99(3)  742(3)    
       7     |    6(3)  364(3)  175(3)  242(3)  270(3)  912(3)  404(3)    
       8     |    7(0)  885(0)  147(0)  803(0)  880(0)  439(0)  626(2)    
       9     |    8(2)  497(3)  347(2)  626(2)  586(2)  540(3)  663(3)    
      10     |    9(0)  846(0)  663(3)  926(0)  269(0)  311(0)  626(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    2   |    2 
       3     |    3   |    3 
       4     |    1   |    1 
       5     |    3   |    3 
       6     |    3   |    3 
       7     |    3   |    3 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    0   |    0 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 100.000%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |    0(1)  318(1)  217(1)  157(1)  955(1)  663(3)  497(3)    
       2     |    1(2)  958(2)  472(2)   55(2)  708(2)  110(2)  626(2)    
       3     |    2(3)  959(3)  663(3)  905(3)  398(3)  626(2)  951(3)    
       4     |    3(1)  476(1)  156(1)  744(1)  403(1)  771(1)  581(1)    
       5     |    4(3)  175(3)   75(3)  905(3)  641(3)  242(3)  230(3)    
       6     |    5(3)  419(3)  540(3)  770(3)  661(3)   99(3)  742(3)    
       7     |    6(3)  364(3)  175(3)  242(3)  270(3)  912(3)  404(3)    
       8     |    7(0)  885(0)  147(0)  803(0)  880(0)  439(0)  626(2)    
       9     |    8(2)  497(3)  347(2)  626(2)  586(2)  540(3)  663(3)    
      10     |    9(0)  846(0)  663(3)  926(0)  269(0)  311(0)  626(2)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    1   |    1 
       2     |    2   |    2 
       3     |    3   |    3 
       4     |    1   |    1 
       5     |    3   |    3 
       6     |    3   |    3 
       7     |    3   |    3 
       8     |    0   |    0 
       9     |    2   |    2 
      10     |    0   |    0 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 96.562%  <<-|


\------> Test model with: test data
---> Predicting class based on KNN: in weighted mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |   39(0)  752(0)  515(0)  537(0)  532(0)  618(0)  838(0)    
       2     |   14(3)  626(2)  497(3)  540(3)  103(2)  372(3)  164(3)    
       3     |  377(2)  626(2)  662(2)  464(2)  219(2)  103(2)  565(2)    
       4     |  655(0)   80(0)  720(0)  497(3)  958(2)  540(3)  803(0)    
       5     |  618(0)  523(0)   32(0)  540(3)  626(2)  497(3)  716(0)    
       6     |  792(1)  857(1)  156(1)  540(3)  142(1)  497(3)  411(2)    
       7     |  626(2)  497(3)  397(1)  411(2)  540(3)  618(0)  791(0)    
       8     |  469(2)  691(2)  540(3)  626(2)  411(2)  497(3)  700(2)    
       9     |  843(0)   73(0)  628(0)  271(0)  678(0)  532(0)  752(0)    
      10     |  857(1)  156(1)   43(1)  412(1)   31(1)  497(3)  663(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in weighted mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    3   |    3 
       3     |    2   |    2 
       4     |    0   |    0 
       5     |    0   |    0 
       6     |    1   |    1 
       7     |    1   |    2 
       8     |    2   |    2 
       9     |    0   |    0 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (weighted): 90.833%  <<-|


---> Predicting class based on KNN: in simple mode...
---> Computing distance to K nearest neighbors...

  | TestX ID | KNN IDs (Class IDs) - trainXY                        |
  |__________|______________________________________________________|
       1     |   39(0)  752(0)  515(0)  537(0)  532(0)  618(0)  838(0)    
       2     |   14(3)  626(2)  497(3)  540(3)  103(2)  372(3)  164(3)    
       3     |  377(2)  626(2)  662(2)  464(2)  219(2)  103(2)  565(2)    
       4     |  655(0)   80(0)  720(0)  497(3)  958(2)  540(3)  803(0)    
       5     |  618(0)  523(0)   32(0)  540(3)  626(2)  497(3)  716(0)    
       6     |  792(1)  857(1)  156(1)  540(3)  142(1)  497(3)  411(2)    
       7     |  626(2)  497(3)  397(1)  411(2)  540(3)  618(0)  791(0)    
       8     |  469(2)  691(2)  540(3)  626(2)  411(2)  497(3)  700(2)    
       9     |  843(0)   73(0)  628(0)  271(0)  678(0)  532(0)  752(0)    
      10     |  857(1)  156(1)   43(1)  412(1)   31(1)  497(3)  663(3)    
     ...     |  ...   


---------->>>
---> Printing test results, in simple mode...

  | TestX ID |   Y    |  Yest  |
  |__________|________|________|
       1     |    0   |    0 
       2     |    3   |    3 
       3     |    2   |    2 
       4     |    0   |    0 
       5     |    0   |    0 
       6     |    1   |    1 
       7     |    1   |    0 
       8     |    2   |    2 
       9     |    0   |    0 
      10     |    1   |    1 
      ...    |   ...  |   ... 

   \-------->>> Prediction accuracy (simple): 91.250%  <<-|



---> End of process.
